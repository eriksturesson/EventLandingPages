import visningsbild1 from '../../assets/DSC01125.JPG';
import visningsbild2 from '../../assets/DSC01286.JPG';
import visningsbild3 from '../../assets/DSC02755.JPG';
import speakerImgExample1 from '../../assets/speakerImgExample1.jpg';
import briefcaseExample from '../../assets/briefcaseExample.png';
import AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';
import DeleteIcon from '@mui/icons-material/Delete';
import react, { useState } from 'react';
import { DBHomePageContent, DBHomePageContentPitchCards, DBPitchCardKey } from '../interfaces/dbInterfaces';
import { Box, Button, Divider, Stack, SvgIcon, TextField } from '@mui/material';
import { deleteObject, getStorage, ref, uploadBytes } from 'firebase/storage';
import { db, devSettings, storage } from '../utils/firebase';
import { child, push, ref as dbRef, set, update, onChildAdded } from 'firebase/database';
import { WEBSITE_ID } from '../../App';
import { EditText, SaveTextsButton } from '../smallComponents/TextEdits';
import { ImageButtonFileUpload, NewImgBoxFileUpload } from '../smallComponents/FileUploads';
import { SectionProps, SectionTypes } from '../interfaces/sectionInterfaces';

interface OnePitchCardProps {
   adminEditor?: boolean;
   img: string;
   order: number;
   initTitle: string;
   initDescription: string;
   newCard?: true;
   id?: string;
   sectionID: string;
   sectionName: SectionTypes;
}

const AddNewPitchCard = ({ sectionID, cardOrderNr }: { sectionID: string; cardOrderNr: number }): JSX.Element => {
   return (
      <Box
         minHeight="10rem"
         sx={{
            textAlign: 'center',
            width: '100%',
            backgroundColor: 'grey',
            position: 'relative',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 3,
            marginBottom: '2rem',
         }}
      >
         <Box
            sx={{
               textAlign: 'center',
               position: 'absolute',
               zIndex: 1,
            }}
         >
            <SvgIcon component={AddPhotoAlternateIcon} fontSize="large" />
            <br></br>
            <ImageButtonFileUpload sectionID={sectionID} sectionName={'pitchCards'} cardOrderNr={cardOrderNr} />
         </Box>
         <img className="participant-image" src={briefcaseExample} />
      </Box>
   );

   // below creates warning: "unreachable code after return statement"
   /*    return (
      <Box
         minHeight="10rem"
         sx={{
            width: '100%',
            position: 'relative',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 2,
         }}
      >
         <SvgIcon
            sx={{
               textAlign: 'center',
               position: 'absolute',
               zIndex: 1,
            }}
            component={AddPhotoAlternateIcon}
            fontSize="large"
         />
         <img className="participant-image" src={briefcaseExample} />
      </Box>
   ); */
};
export function OnePitchCard(props: OnePitchCardProps): JSX.Element {
   const { adminEditor, img, order, initTitle, initDescription, newCard, id, sectionID, sectionName } = props;
   const [title, setTitle] = useState(initTitle);
   const [description, setDescription] = useState(initDescription);

   const handleTitleChange = (event: any) => {
      let text: string = event.target.value;
      setTitle(text);
   };

   const handleDescriptionChange = (event: any) => {
      let text: string = event.target.value;
      setDescription(text);
   };

   const removePitchCard = (id: string, imgStorageRef: string) => {
      return () => {
         //Remove from db
         const pitchCardsRef = dbRef(db, `websites/${WEBSITE_ID}/homepageContent/${sectionID}/content/${id}`);
         set(pitchCardsRef, null);
         // Create a reference to the file to delete from Storage
         const pitchCardImgRefInStorage = ref(storage, imgStorageRef);

         // Delete the file
         deleteObject(pitchCardImgRefInStorage)
            .then(() => {
               // File deleted successfully
               console.log('File deleted successfully');
            })
            .catch((error) => {
               // Uh-oh, an error occurred!
               console.log('Error deleting file');
            });
      };
   };

   return (
      <Box className="pitchcard-container" id={id}>
         <Box className="pitchcard-box">
            {adminEditor && id && !newCard ? (
               <Box
                  sx={{
                     marginTop: '1rem',
                     backgroundColor: 'grey',
                     textAlign: 'left',
                     width: '100%',
                     display: 'flex',
                     alignItems: 'center',
                  }}
               >
                  <SvgIcon
                     style={{ color: 'red', cursor: 'pointer' }}
                     onClick={removePitchCard(id, img)}
                     component={DeleteIcon}
                     fontSize="large"
                  />
                  <Box>
                     <b>Remove entire card</b>
                  </Box>
               </Box>
            ) : null}

            {adminEditor && newCard ? (
               <>
                  <NewImgBoxFileUpload sectionID={sectionID} cardOrderNr={order} sectionName={sectionName} />

                  {/*<AddNewPitchCard sectionID={sectionID} cardOrderNr={order} />*/}
               </>
            ) : (
               <img className="visningsbilder" alt="visningsbild1" src={img} />
            )}
            {adminEditor ? <EditText onChange={handleTitleChange} initText={title} /> : <h1>{title}</h1>}
            {adminEditor ? <EditText onChange={handleDescriptionChange} initText={description} /> : <p>{description}</p>}
            {adminEditor ? (
               <SaveTextsButton
                  refBelowWebsiteID={`homepageContent/${sectionID}/content/${id}`}
                  data={{ title: title, description: description, id: id, order: order }}
               />
            ) : null}
         </Box>
      </Box>
   );
}

export function PitchCardsComponent(props: SectionProps): JSX.Element {
   const { data } = props;
   const { sectionName, sectionID, sectionOrder, createdAt, updatedAt } = data;
   const content = data.content as DBPitchCardKey;
   const pitchCardsDB = content.items;

   const [adminEditor, setadminEditor] = useState(props.adminEditor);
   const [title, setTitle] = useState(content.title);

   const handlePitchCardSectionTitleChange = (event: any) => {
      let text: string = event.target.value;
      setTitle(text);
   };

   let pitchCardsContent: JSX.Element[] = [];

   // Sort the pitchCards array based on the "order" property
   if (pitchCardsDB) {
      if (pitchCardsDB.title) delete pitchCardsDB.title;
      let pitchCards: DBHomePageContentPitchCards[] = Object.values(pitchCardsDB as any);
      if (pitchCards) {
         pitchCards.sort((a, b) => a.order - b.order);

         for (let i = 0; i < pitchCards.length; i++) {
            pitchCardsContent.push(
               <OnePitchCard
                  id={pitchCards[i].id}
                  sectionName={sectionName}
                  sectionID={sectionID}
                  adminEditor={adminEditor}
                  order={pitchCards[i].order}
                  img={pitchCards[i].image ? (pitchCards[i].image as string) : ({ speakerImgExample1 } as unknown as string)}
                  initTitle={pitchCards[i].title ? (pitchCards[i].title as string) : 'Example title'}
                  initDescription={pitchCards[i].description ? (pitchCards[i].description as string) : 'Example description'}
                  key={i}
               />
            );
         }
      }
      return (
         <>
            {adminEditor ? (
               <Divider>
                  <h2>Edit pitchcards</h2>
               </Divider>
            ) : null}
            {adminEditor ? (
               <EditText
                  onChange={handlePitchCardSectionTitleChange}
                  initText={title ? title : '<h2>Example title of pitchCards</h2>'}
               />
            ) : (
               <h1>{title}</h1>
            )}
            {adminEditor ? (
               <SaveTextsButton refBelowWebsiteID={`homepageContent/${sectionID}/content/`} data={{ title: title }} />
            ) : null}
            <Box className="wrapperOfImagesWithPitch">
               {pitchCardsContent}
               {/* Below is to always make it available to add one more pitchCards */}
               {adminEditor ? (
                  <OnePitchCard
                     adminEditor={adminEditor}
                     sectionName={sectionName}
                     sectionID={sectionID}
                     newCard={true}
                     order={pitchCardsContent.length + 1}
                     img={''}
                     initTitle={''}
                     initDescription={''}
                  />
               ) : null}
            </Box>
         </>
      );
   } else {
      return (
         <Box className="wrapperOfImagesWithPitch">
            <OnePitchCard
               adminEditor={adminEditor}
               sectionName={sectionName}
               sectionID={sectionID}
               order={1}
               img={visningsbild1}
               initTitle={'About Rotary'}
               initDescription={
                  "Rotary is a global network of 1.2 million neighbors, friends, leaders, and problem-solvers who see a world where people unite and take action to create lasting change â€“ across the globe, in our communities, and in ourselves. Solving real problems takes real commitment and vision. For more than 110 years, Rotary's people of action have used their passion, energy, and intelligence to take action on sustainable projects. From literacy and peace to water and health, we are always working to better our world, and we stay committed to the end. Read more at <a href='https://www.rotary.org/en'>Rotary.org</a>."
               }
            />
            <OnePitchCard
               adminEditor={adminEditor}
               sectionName={sectionName}
               sectionID={sectionID}
               order={2}
               img={visningsbild2}
               initTitle={'Stockholm City AffÃ¤rsnÃ¤tverk'}
               initDescription={
                  'Rotaryklubbar bestÃ¥r av Rotarianer som trÃ¤ffas generellt en gÃ¥ng i veckan fÃ¶r ett frukost-, lunch- eller middagsmÃ¶te. AffÃ¤rsnÃ¤tverket i Stockholm City Ã¤r ett samarbete dÃ¤r 10 olika klubbar gÃ¥tt samman fÃ¶r att trÃ¤ffas med ett stÃ¶rre fokus pÃ¥ att frÃ¤mja nÃ¤tverket som finns fÃ¶r att hjÃ¤lpa dagens yrkesverksamma att lyckas i karriÃ¤ren genom goda vÃ¤rderingar och vÃ¤rdefulla kontakter. Vi inspirerar, utbildar och uppdaterar ocksÃ¥ vÃ¥ra Rotarianer med spÃ¤nnande fÃ¶relÃ¤sare i samband med lunchtrÃ¤ffarna.'
               }
            />
            <OnePitchCard
               adminEditor={adminEditor}
               sectionName={sectionName}
               sectionID={sectionID}
               order={3}
               img={visningsbild3}
               initTitle={'Hur gÃ¥r jag med i Rotary?'}
               initDescription={
                  'NÃ¤r du fÃ¶ljt med som gÃ¤st nÃ¥gra gÃ¥nger till en kontakt som bjudit in dig kanske du bÃ¶rjar fundera pÃ¥ om du vill gÃ¥ med i Rotary? DÃ¥ fÃ¥r du gÃ¤rna besÃ¶ka olika Rotaryklubbar, fÃ¶rslagsvis nÃ¥gon av oss 10 som arrangerar detta affÃ¤rsnÃ¤tverk. Man blir medlem genom att skicka in en ansÃ¶kan till klubben man vill gÃ¥ med i men man mÃ¥ste Ã¤ven i varje klubb vara gÃ¤st fÃ¶r att fÃ¥ komma. Det rekommenderas att man gÃ¥r flera gÃ¥nger som gÃ¤st pÃ¥ samma klubb sÃ¥ att Rotarianerna fÃ¥r en bra kÃ¤nsla av vem gÃ¤sten Ã¤r innan en ansÃ¶kan inkommer. Annars finns risk att det blir avslag pÃ¥ ansÃ¶kan.'
               }
            />
         </Box>
      );
   }
}
